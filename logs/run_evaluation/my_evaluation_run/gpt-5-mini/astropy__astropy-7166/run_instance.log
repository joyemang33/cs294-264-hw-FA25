2025-10-03 03:45:27,844 - INFO - Creating container for astropy__astropy-7166...
2025-10-03 03:45:27,896 - INFO - Container for astropy__astropy-7166 created: 4ecb836d8625136cefba0ddf17a835101ecd6ef461bc5eec56d4ccd87816e73f
2025-10-03 03:45:28,082 - INFO - Container for astropy__astropy-7166 started: 4ecb836d8625136cefba0ddf17a835101ecd6ef461bc5eec56d4ccd87816e73f
2025-10-03 03:45:28,083 - INFO - Intermediate patch for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/astropy__astropy-7166/patch.diff, now applying to container...
2025-10-03 03:45:28,206 - INFO - >>>>> Applied Patch:
Checking patch astropy/utils/misc.py...
Applied patch astropy/utils/misc.py cleanly.

2025-10-03 03:45:28,590 - INFO - Git diff before:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..d4dd707b4 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,16 +528,47 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if not is_public_member(key):
+                continue
+
+            # Determine the underlying function-like object for this member,
+            # handling plain functions/methods, staticmethod/classmethod, and
+            # property (use fget). If it's not one of these, skip it.
+            func = None
+            if inspect.isfunction(val) or inspect.ismethod(val):
+                func = val
+            elif isinstance(val, (staticmethod, classmethod)):
+                func = val.__func__
+            elif isinstance(val, property):
+                func = val.fget
+
+            if func is None:
+                continue
+
+            # Only try to inherit if there's no docstring on the underlying function.
+            if getattr(func, '__doc__', None) is None:
                 for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                    super_attr = getattr(base, key, None)
+                    if super_attr is None:
+                        continue
+
+                    # Extract the underlying function from the base attribute
+                    if inspect.isfunction(super_attr) or inspect.ismethod(super_attr):
+                        super_func = super_attr
+                    elif isinstance(super_attr, (staticmethod, classmethod)):
+                        super_func = super_attr.__func__
+                    elif isinstance(super_attr, property):
+                        super_func = super_attr.fget
+                    else:
+                        super_func = None
+
+                    if super_func is not None and getattr(super_func, '__doc__', None):
+                        # Set the docstring on the underlying function object.
+                        # For properties, the property's __doc__ reflects fget.__doc__,
+                        # so setting fget.__doc__ is sufficient.
+                        func.__doc__ = super_func.__doc__
                         break
-
-        super().__init__(name, bases, dct)
+super().__init__(name, bases, dct)
 
 
 class OrderedDescriptor(metaclass=abc.ABCMeta):
2025-10-03 03:45:28,590 - INFO - Eval script for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/astropy__astropy-7166/eval.sh; copying to container...
2025-10-03 03:45:30,387 - INFO - Test runtime: 1.74 seconds
2025-10-03 03:45:30,387 - INFO - Test output for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/astropy__astropy-7166/test_output.txt
2025-10-03 03:45:30,452 - INFO - Git diff after:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..d4dd707b4 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,16 +528,47 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if not is_public_member(key):
+                continue
+
+            # Determine the underlying function-like object for this member,
+            # handling plain functions/methods, staticmethod/classmethod, and
+            # property (use fget). If it's not one of these, skip it.
+            func = None
+            if inspect.isfunction(val) or inspect.ismethod(val):
+                func = val
+            elif isinstance(val, (staticmethod, classmethod)):
+                func = val.__func__
+            elif isinstance(val, property):
+                func = val.fget
+
+            if func is None:
+                continue
+
+            # Only try to inherit if there's no docstring on the underlying function.
+            if getattr(func, '__doc__', None) is None:
                 for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                    super_attr = getattr(base, key, None)
+                    if super_attr is None:
+                        continue
+
+                    # Extract the underlying function from the base attribute
+                    if inspect.isfunction(super_attr) or inspect.ismethod(super_attr):
+                        super_func = super_attr
+                    elif isinstance(super_attr, (staticmethod, classmethod)):
+                        super_func = super_attr.__func__
+                    elif isinstance(super_attr, property):
+                        super_func = super_attr.fget
+                    else:
+                        super_func = None
+
+                    if super_func is not None and getattr(super_func, '__doc__', None):
+                        # Set the docstring on the underlying function object.
+                        # For properties, the property's __doc__ reflects fget.__doc__,
+                        # so setting fget.__doc__ is sufficient.
+                        func.__doc__ = super_func.__doc__
                         break
-
-        super().__init__(name, bases, dct)
+super().__init__(name, bases, dct)
 
 
 class OrderedDescriptor(metaclass=abc.ABCMeta):
2025-10-03 03:45:30,453 - INFO - Grading answer for astropy__astropy-7166...
2025-10-03 03:45:30,457 - INFO - report: {'astropy__astropy-7166': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['astropy/utils/tests/test_misc.py::test_inherit_docstrings']}, 'PASS_TO_PASS': {'success': [], 'failure': ['astropy/utils/tests/test_misc.py::test_isiterable', 'astropy/utils/tests/test_misc.py::test_signal_number_to_name_no_failure', 'astropy/utils/tests/test_misc.py::test_skip_hidden', 'astropy/utils/tests/test_misc.py::test_JsonCustomEncoder', 'astropy/utils/tests/test_misc.py::test_check_broadcast', 'astropy/utils/tests/test_misc.py::test_dtype_bytes_or_chars']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for astropy__astropy-7166: resolved: False
2025-10-03 03:45:30,457 - INFO - Attempting to stop container sweb.eval.astropy__astropy-7166.my_evaluation_run...
2025-10-03 03:45:45,597 - INFO - Attempting to remove container sweb.eval.astropy__astropy-7166.my_evaluation_run...
2025-10-03 03:45:45,616 - INFO - Container sweb.eval.astropy__astropy-7166.my_evaluation_run removed.

diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py
index 87707d48f..d7806e907 100644
--- a/sphinx/util/typing.py
+++ b/sphinx/util/typing.py
@@ -192,10 +192,19 @@ def _restify_py37(cls: Optional[Type]) -> str:
     elif isinstance(cls, typing._SpecialForm):
         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)
     elif hasattr(cls, '__qualname__'):
+        # Some proxy/mocked objects may claim a __qualname__ or __module__ but
+        # the qualname may be empty (or otherwise not useful). In such cases
+        # prefer a non-empty name if available, falling back to repr() to
+        # avoid producing outputs like "torch.nn." (trailing dot).
+        name = getattr(cls, '__qualname__', None) or getattr(cls, '__name__', None)
+        if not name:
+            # as a last resort, use repr to show something meaningful
+            return repr(cls)
+
         if cls.__module__ == 'typing':
-            return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`~%s.%s`' % (cls.__module__, name)
         else:
-            return ':py:class:`%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`%s.%s`' % (cls.__module__, name)
     elif isinstance(cls, ForwardRef):
         return ':py:class:`%s`' % cls.__forward_arg__
     else:
@@ -274,10 +283,19 @@ def _restify_py36(cls: Optional[Type]) -> str:
         else:
             return ':py:obj:`Union`'
     elif hasattr(cls, '__qualname__'):
+        # Some proxy/mocked objects may claim a __qualname__ or __module__ but
+        # the qualname may be empty (or otherwise not useful). In such cases
+        # prefer a non-empty name if available, falling back to repr() to
+        # avoid producing outputs like "torch.nn." (trailing dot).
+        name = getattr(cls, '__qualname__', None) or getattr(cls, '__name__', None)
+        if not name:
+            # as a last resort, use repr to show something meaningful
+            return repr(cls)
+
         if cls.__module__ == 'typing':
-            return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`~%s.%s`' % (cls.__module__, name)
         else:
-            return ':py:class:`%s.%s`' % (cls.__module__, cls.__qualname__)
+            return ':py:class:`%s.%s`' % (cls.__module__, name)
     elif hasattr(cls, '_name'):
         # SpecialForm
         if cls.__module__ == 'typing':
